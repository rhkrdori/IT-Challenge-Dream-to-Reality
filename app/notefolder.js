// NoteFolder.js
import { Feather } from "@expo/vector-icons";
import { useLocalSearchParams, useRouter } from "expo-router";
import { useEffect, useState } from "react";
import {
  FlatList,
  Keyboard,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  TouchableWithoutFeedback,
  View,
} from "react-native";

export default function NoteFolder() {
  const { folderName, openAddNote, // ÏÉàÎ°ú Ï†ÑÎã¨Î∞õÏùÑ ÌååÎùºÎØ∏ÌÑ∞Îì§ÏùÑ Ïó¨Í∏∞ÏÑú Í∞ÄÏ†∏ÏòµÎãàÎã§.
    updatedNoteTitle,
    updatedNoteContent,
    originalNoteId // ÎÖ∏Ìä∏Î•º ÏãùÎ≥ÑÌï† Í≥†Ïú† ID (Ï†úÎ™© ÎåÄÏã† ÏÇ¨Ïö© Í∂åÏû•)
  } = useLocalSearchParams();
  const router = useRouter();

  // notes ÏÉÅÌÉúÎ•º Í∞ùÏ≤¥ Î∞∞Ïó¥Î°ú Î≥ÄÍ≤ΩÌïòÏó¨ Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Ìï®Íªò Ï†ÄÏû•
  // Í∞Å ÎÖ∏Ìä∏Ïóê Í≥†Ïú†Ìïú idÎ•º Ï∂îÍ∞ÄÌïòÏó¨ ÏãùÎ≥ÑÌï©ÎãàÎã§ (Îß§Ïö∞ Ï§ëÏöî!).
  const [notes, setNotes] = useState([]);
  const [isCreatingNote, setIsCreatingNote] = useState(false);
  const [newNoteName, setNewNoteName] = useState("");

  useEffect(() => {
    if (openAddNote === "true") {
      setIsCreatingNote(true);
    }
  }, [openAddNote]);

  // üö® Ï∂îÍ∞Ä/Î≥ÄÍ≤Ω: updatedNoteTitle, updatedNoteContent, originalNoteId ÌååÎùºÎØ∏ÌÑ∞ Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    // console.log("NoteFolder params changed:", { updatedNoteTitle, updatedNoteContent, originalNoteId });
    if (originalNoteId && updatedNoteTitle !== undefined && updatedNoteContent !== undefined) {
      setNotes((prevNotes) =>
        prevNotes.map((note) =>
          note.id === originalNoteId // Í≥†Ïú† IDÎ°ú ÎÖ∏Ìä∏Î•º Ï∞æÏäµÎãàÎã§.
            ? { ...note, title: updatedNoteTitle, content: updatedNoteContent }
            : note
        )
      );
      // Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ, Ìï¥Îãπ ÌååÎùºÎØ∏ÌÑ∞Îì§ÏùÑ Ï†úÍ±∞ÌïòÏó¨ Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄ Î∞è Ï§ëÎ≥µ ÏóÖÎç∞Ïù¥Ìä∏ Î∞©ÏßÄ
      // Ïù¥ Î∂ÄÎ∂ÑÏùÄ Expo Router 2.x Ïù¥ÏÉÅÏóêÏÑú router.setParams()Î°ú Ï¥àÍ∏∞ÌôîÌïòÎäî Î∞©ÏãùÏù¥ ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.
      // Ïó¨Í∏∞ÏÑúÎäî Í∞ÑÎã®Ìûà useEffectÏùò ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ÏùÑ ÌÜµÌï¥ Ï≤òÎ¶¨Ìï©ÎãàÎã§.
    }
  }, [updatedNoteTitle, updatedNoteContent, originalNoteId]); // ÌååÎùºÎØ∏ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§Ìñâ

  // ÎÖ∏Ìä∏ Ï∂îÍ∞Ä Ìï∏Îì§Îü¨
  const handleAddNote = () => {
    if (newNoteName.trim()) {
      const newId = Date.now().toString(); // Í≥†Ïú† ID ÏÉùÏÑ±
      const newNote = { id: newId, title: newNoteName.trim(), content: "" }; // Ï¥àÍ∏∞ ÎÇ¥Ïö©ÏùÄ ÎπÑÏñ¥ÏûàÏùå
      setNotes((prevNotes) => [...prevNotes, newNote]); // Í∏∞Ï°¥ ÎÖ∏Ìä∏ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÏÉà ÎÖ∏Ìä∏ Ï∂îÍ∞Ä

      router.push({
        pathname: "/writenote",
        params: {
          initialNoteTitle: newNote.title,
          initialNoteContent: newNote.content,
          noteId: newNote.id, // ÏÉàÎ°ú ÏÉùÏÑ±Îêú ÎÖ∏Ìä∏Ïùò ID Ï†ÑÎã¨
        },
      });
    }
    setNewNoteName("");
    setIsCreatingNote(false);
    Keyboard.dismiss();
  };


  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <View style={styles.container}>
        <Text style={styles.title}>{folderName}</Text>

        <View style={styles.folderCard}>
          <Feather name="folder" size={20} color="#A18CD1" />
          <Text style={styles.folderTitle}>{folderName}</Text>
          <Text style={styles.noteCount}>{`( ${notes.length} )`}</Text>
        </View>

        <FlatList
          data={notes}
          keyExtractor={(item) => item.id} // keyExtractorÎ•º item.idÎ°ú Î≥ÄÍ≤Ω
          renderItem={({ item }) => (
            <TouchableOpacity
              onPress={() =>
                router.push({
                  pathname: "/writenote",
                  params: {
                    initialNoteTitle: item.title,
                    initialNoteContent: item.content,
                    noteId: item.id, // ÎÖ∏Ìä∏ ID Ï†ÑÎã¨
                  },
                })
              }
            >
              <View style={styles.noteCard}>
                <Feather name="file" size={20} color="#A18CD1" />
                <Text style={styles.noteText}>{item.title}</Text>
              </View>
            </TouchableOpacity>
          )}
          ListFooterComponent={
            isCreatingNote && (
              <View style={styles.noteCard}>
                <Feather name="file" size={20} color="#A18CD1" />
                <TextInput
                  style={styles.noteText}
                  placeholder="ÎÖ∏Ìä∏Î™Ö ÏûÖÎ†•"
                  value={newNoteName}
                  onChangeText={setNewNoteName}
                  autoFocus
                  onSubmitEditing={handleAddNote}
                  returnKeyType="done"
                />
              </View>
            )
          }
        />

        <TouchableOpacity
          style={styles.floatingButton}
          onPress={() => setIsCreatingNote(true)}
        >
          <Feather name="file-plus" size={24} color="#A18CD1" />
        </TouchableOpacity>
      </View>
    </TouchableWithoutFeedback>
  );
}

const styles = StyleSheet.create({
  container: {
    paddingTop: 60,
    paddingHorizontal: 20,
    flex: 1,
    backgroundColor: "#fff",
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    marginBottom: 40,
    marginTop: 15,
  },
  folderCard: {
    flexDirection: "row",
    alignItems: "center",
    padding: 12,
    borderColor: "#EEE6FA",
    borderWidth: 1,
    borderRadius: 10,
    marginBottom: 10,
  },
  folderTitle: {
    fontSize: 16,
    marginLeft: 8,
  },
  noteCount: {
    marginLeft: "auto",
    fontSize: 14,
    color: "#999",
  },
  noteCard: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#F6F0FF",
    padding: 12,
    borderRadius: 12,
    marginBottom: 10,
    marginLeft: 15,
  },
  noteText: {
    marginLeft: 10,
    fontSize: 16,
    flex: 1,
  },
  floatingButton: {
    position: "absolute",
    bottom: 30,
    right: 20,
    width: 50,
    height: 50,
    backgroundColor: "#EFE3FF",
    borderRadius: 25,
    justifyContent: "center",
    alignItems: "center",
  },
});